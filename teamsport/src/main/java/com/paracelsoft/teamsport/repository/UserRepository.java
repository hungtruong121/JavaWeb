package com.paracelsoft.teamsport.repository;

import java.math.BigInteger;
import java.util.List;
import java.util.Map;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.querydsl.QuerydslPredicateExecutor;
import org.springframework.stereotype.Repository;

import com.paracelsoft.teamsport.entity.User;

/**
 * Generated by Spring Data Generator on 16/03/2019
 */
@Repository
public interface UserRepository
		extends JpaRepository<User, BigInteger>, JpaSpecificationExecutor<User>, QuerydslPredicateExecutor<User> {

	List<User> findByUserRoleId(BigInteger userRoleId); // Get all user theo role và bao gồm all trạng thái(active-non-active-block)
	
	User findByUserIdAndIsActive(BigInteger bigInteger, int isActive);
	
	User findByUserRoleIdAndIsActive(BigInteger userRoleId, int isActive);
	
	User findByUserId(BigInteger userId); // Get user by UserId to change IsActive - Block user (Webadmin)
	
	List<User> findByRelativeIdAndIsActive(BigInteger userId,int isActive);
	
	@Query(value="SELECT * FROM user \r\n" + 
			"where user_mail = :email and is_active = :isActive", nativeQuery = true)
	List<User> findByUserEmailAndIsActive(String email,int isActive);
	
	@Query(value="SELECT u.user_id, ifnull(u.user_full_name, '') as user_full_name, ifnull(u.user_avatar,'1') as user_avatar, \r\n" + 
			"ifnull(t.position_sport,'') as position_sport, ifnull(t.team_member_role,'') as team_member_role\r\n" + 
			"FROM user u join team_member t on t.user_id = u.user_id\r\n" + 
			"			where t.team_id = :teamId and u.user_full_name \r\n" + 
			"            like :keyword and u.is_active = 1 and t.is_active = 1", nativeQuery = true)
	List<Map<String, Object>> searchByTeamId(BigInteger teamId, String keyword);

	@Query(value="SELECT u.user_id, ifnull(u.user_full_name, '') as user_full_name, ifnull(u.user_avatar,'1') as user_avatar, \r\n" + 
			"ifnull(t.position_sport,'') as position_sport, ifnull(t.team_member_role,'') as team_member_role\r\n" + 
			"FROM user u join team_member t on t.user_id = u.user_id\r\n" + 
			"			where t.team_id = :teamId and u.user_full_name \r\n" + 
			"            like :keyword and u.is_active = 1 and t.is_active = 1 limit :firstResult, :maxResult", nativeQuery = true)
	List<Map<String, Object>> searchPageByTeamId(BigInteger teamId, String keyword, int firstResult, int maxResult);

	@Query(value="SELECT count(u.user_id) FROM user u join team_member t on t.user_id = u.user_id\r\n" + 
			"where t.team_id = :teamId and u.user_full_name like :keyword and u.is_active = 1 and t.is_active = 1 ", nativeQuery = true)
	Integer searchCountPageByTeamId(BigInteger teamId, String keyword);

	@Query(value="SELECT ifnull(u.user_id,'') as user_id,ifnull(u.user_avatar,'1') as user_avatar,\r\n" + 
			"			ifnull(u.user_full_name,'') as user_full_name,ifnull(tm.position_sport,'') as position_sport,\r\n" + 
			"            (select utmp.user_full_name from user utmp where utmp.user_id = tm.created_by) as invitedName,\r\n" + 
			"			ifnull(tm.created_by,'') as created_by\r\n" + 
			"			FROM user u JOIN team_member_status tm\r\n" + 
			"			ON u.user_id = tm.user_id\r\n" + 
			"			WHERE tm.team_id = :teamId \r\n" + 
			"			AND tm.status_id = :status \r\n" + 
			"			AND tm.is_active = :isActive\r\n" + 
			"			AND u.is_active = :isActive\r\n" + 
			"            group by tm.user_id", nativeQuery = true)
	List<Map<String, Object>> getListRequest(BigInteger teamId,BigInteger status,int isActive);
	
	/**
	 * @Des ham nay ko check active, chi dung cho check dang ki user
	 * @param userMail
	 * @return
	 */
	List<User> findAllByUserMail(String userMail);
	
	@Query(value="SELECT * from user u\r\n" + 
			"	join team_member t on t.user_id = u.user_id\r\n" + 
			"	WHERE t.team_id = :teamId \r\n" + 
			"	AND t.team_member_role = :team_member_role\r\n" + 
			"	AND u.user_id != :userId\r\n" + 
			"    AND t.is_active = 1 AND u.is_active = 1", nativeQuery = true)
	List<User> getAllAdminExcepUser(BigInteger teamId, BigInteger userId, String team_member_role);

	@Query(value="SELECT * from user u\r\n" + 
			"	join team_member t on t.user_id = u.user_id\r\n" + 
			"	WHERE t.team_id = :teamId \r\n" + 
			"	AND t.team_member_role = :team_member_role\r\n" + 
			"    AND t.is_active = 1 AND u.is_active = 1", nativeQuery = true)
	List<User> getAllAdmin(BigInteger teamId, String team_member_role);
	
	@Query(value= 
			"SELECT 	\r\n" + 
			"	ifnull(u.user_id,'') as user_id,        \r\n" + 
			"	ifnull(u.user_avatar,'1') as user_avatar,\r\n" + 
			"	ifnull(u.user_full_name,'') as user_full_name, \r\n" + 
			"	   ifnull((select  GROUP_CONCAT(distinct(t.team_name) SEPARATOR ', ') as TeamName from team t join team_member tm on tm.team_id = t.team_id\r\n" + 
			"		where tm.user_id = u.user_id order by t.team_name),'') as team_joined,\r\n" + 
			"		ifnull((select GROUP_CONCAT(distinct(s.sport_name)  SEPARATOR ', ') as sport_name from team t join team_member tm on tm.team_id = t.team_id join sport s on s.sport_id = t.sport_id\r\n" + 
			"		where tm.user_id = u.user_id order by s.sport_name),'') as sport_name\r\n" + 
			"FROM \r\n" + 
			"	user u \r\n" + 
			"	JOIN team_member_status tms ON u.user_id = tms.user_id\r\n" + 
			"WHERE \r\n" + 
			"	tms.team_id = :teamId\r\n" + 
			"	AND tms.status_id = :status\r\n" + 
			"	AND tms.is_active = :isActive\r\n" + 
			"	AND u.is_active = :isActive\r\n" + 
			"GROUP BY tms.user_id;", nativeQuery = true)
	List<Map<String, Object>> getListInviteTeam(BigInteger teamId,BigInteger status,int isActive);

}
